{"version":3,"sources":["images/Flat_cross_icon.svg","images/account_circle-white-48dp.svg","images/brightness_4-black-48dp.svg","images/brightness_4-white-48dp.svg","Components/AppName/AppName.js","Components/User/User.js","Components/Pages/MainPage/MainPage.js","Components/FlipCard/FlipCard.js","Components/DeckStatistics/DeckStatistics.js","Components/Deck/Deck.js","deckExamples.js","Components/ChooseDialog/ChooseDialog.js","Components/Pages/DecksPage/DecksPage.js","Components/CardCarousel/CardsCorusel.js","Components/Pages/GamePage/GamePage.js","Components/DeckSubview/DeckSubview.js","Components/Pages/ViewDeckPage/ViewDeckPage.js","Components/Pages/CreatePage/CreatePage.js","Components/App/App.js","Components/Pages/PageNames.js","serviceWorker.js","index.js"],"names":["module","exports","AppName","onClick","className","User","user","src","userIcon","alt","draggable","name","surname","MainPage","onLogin","href","FlipCard","flipped","flipOnHover","children","DeckStatistics","cardsCount","gamesCount","userRating","lastRepeatTime","playedBefore","isOk","Math","round","getLastRepeatTime","value","undefined","date","seconds","floor","Date","interval","Deck","deck","isUsers","onAdd","onPlay","onView","onDelete","crossIcon","myDecks","id","cards","front","back","now","standardDecks","ChooseDialog","onCancel","isShown","Decks","props","context","toggleChooseDialog","setState","showBlackout","state","createDeck","delete","key","deckId","decks","filter","d","create","onCreate","chooseStandard","onChooseStandard","this","map","React","Component","CardCarousel","cardIndex","buttons","lastButton","curIndex","min","length","shift","isLast","style","transform","GamePage","getCard","card","index","getButtons","isCurrentCardFlipped","knewCurrentCard","createButton","actuallyKnowHandle","actuallyDontKnowHandle","moveToNextCard","knowHandle","dontKnowHandle","label","handle","updateFlipped","f","i","find","_","onEnd","DeckSubview","renderCard","onCardChoice","chosenIndex","ViewDeckPage","getHeading","ref","createRef","heading","isEditable","type","defaultValue","onBlur","editDeckHeading","onKeyPress","enterHandler","flip","push","getCardSide","e","editCard","target","setCardIndex","concat","c","current","blur","onBack","CreatePage","newDeck","App","setPageName","pageName","setDeckId","toggleDarkMode","isDarkTheme","play","edit","view","add","goToMain","getMainPage","logIn","getPage","console","log","brightThemeIcon","darkThemeIcon","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a4c2f7fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Flat_cross_icon.01d4eced.svg\";","module.exports = __webpack_public_path__ + \"static/media/account_circle-white-48dp.f0b80d9b.svg\";","module.exports = __webpack_public_path__ + \"static/media/brightness_4-black-48dp.bf8278b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/brightness_4-white-48dp.9e80471f.svg\";","import React from \"react\";\nimport './AppName.css'\n\nexport default function AppName({onClick}) {\n    return (\n        <div className='app-name' onClick={onClick}>\n            Natural Selected Cards\n        </div>\n    )\n}","import React from \"react\";\nimport './User.css'\nimport userIcon from '../../images/account_circle-white-48dp.svg'\n\nexport default function User({user}) {\n    return (\n        <div className='user'>\n            {user &&\n            <>\n                <img src={userIcon} alt='👤' className='user-image main-color-dark' draggable={false}/>\n                <span className='user-name'>{user.name} {user.surname}</span>\n            </>\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport './MainPage.css'\n\nexport default function MainPage({onLogin}) {\n    return (\n        <div className='main-page'>\n            <p>\n                Добро пожаловать!<br/>\n                Данный сайт предоставляет возможность<br/>\n                потренироваться в запоминании информации<br/>\n                по <a href='https://en.wikipedia.org/wiki/Flashcard'>методу флэш-карточек</a>.\n            </p>\n            <p>\n                Для того, чтобы начать,<br/>\n                <button onClick={onLogin} className='main-color shadow enter-button'>Войдите</button><br/>\n                и добавьте в коллекцию первую колоду.<br/>\n            </p>\n            <p>\n                Удачи!\n            </p>\n\n        </div>\n    )\n}","import React from \"react\";\nimport './FlipCard.css'\n\nexport default function FlipCard({flipped, flipOnHover = false, children}) {\n    return (\n        <div className={'flip-container' + (flipOnHover ? ' flip-on-hover' : '') + (flipped ? ' flipped' : '')}>\n            <div className='flip-card'>\n                <div className='front-side shadow main-color'>\n                    {children[0]}\n                </div>\n                <div className='back-side shadow main-color-light'>\n                    {children[1]}\n                </div>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport './DeckStatistics.css';\n\nexport default function DeckStatistics({cardsCount, gamesCount, userRating, lastRepeatTime}) {\n    const playedBefore = isOk(gamesCount) && gamesCount > 0;\n    return (\n        <div className='deck-statistics'>\n            <div>Колличество карт: {cardsCount}</div>\n            {\n                isOk(gamesCount) &&\n                <div>Колличество игр: {gamesCount}</div>\n            }\n            {\n                isOk(userRating) && playedBefore &&\n                <div>Ваш рейтинг: {Math.round(userRating * 100)}%</div>\n            }\n            {\n                isOk(lastRepeatTime) && playedBefore &&\n                <div>Последняя тренировка: {getLastRepeatTime(lastRepeatTime)}</div>\n            }\n        </div>\n    );\n}\n\nconst isOk = value => value !== undefined;\n\nconst getLastRepeatTime = date => {\n    const seconds = Math.floor((new Date() - date) / 1000);\n\n    let interval = Math.floor(seconds / 60 / 60 / 24 / 30);\n    if (interval >= 1)\n        return 'Больше месяца назад';\n\n    interval = Math.floor(seconds / 60 / 60 / 24 / 7);\n    if (interval > 1)\n        return `${interval} недели назад`;\n    if (interval === 1)\n        return 'Неделю назад';\n\n    interval = Math.floor(seconds / 60 / 60 / 24);\n    if (interval > 5)\n        return `${interval} дней назад`;\n    if (interval > 1)\n        return `${interval} дня назад`;\n    if (interval === 1)\n        return 'Вчера';\n\n    return 'Сегодня';\n};\n","import React from \"react\";\nimport './Deck.css'\nimport FlipCard from \"../FlipCard/FlipCard\";\nimport crossIcon from '../../images/Flat_cross_icon.svg'\nimport DeckStatistics from \"../DeckStatistics/DeckStatistics\";\n\nexport default function Deck({deck, isUsers, onAdd, onPlay, onView, onDelete}) {\n    return (\n        <FlipCard flipOnHover={true}>\n            <div className='deck-name'>\n                {deck.name}\n            </div>\n            <div className='deck-info'>\n                <div className='deck-name'>\n                    {deck.name}\n                </div>\n                {\n                    isUsers\n                        ? <DeckStatistics\n                            cardsCount={deck.cardsCount}\n                            gamesCount={deck.gamesCount}\n                            userRating={deck.userRating}\n                            lastRepeatTime={deck.lastRepeatTime}\n                        />\n                        : <DeckStatistics\n                            cardsCount={deck.cardsCount}\n                        />\n                }\n                <div className='controls'>\n                    <button className='edit-button yellow shadow' onClick={onView}>Просмотр</button>\n                    <button className='play-button green shadow' onClick={isUsers ? onPlay : onAdd}>\n                        {isUsers ? 'Играть' : 'Добавить'}\n                    </button>\n                    {\n                        isUsers &&\n                        <button className='delete-button' onClick={onDelete}>\n                            <img src={crossIcon} alt='X' draggable={false}/>\n                        </button>\n                    }\n                </div>\n            </div>\n        </FlipCard>\n    )\n}","const day = 1000 * 60 * 60 * 24;\n\nexport const myDecks = [\n    {\n        name: 'Words',\n        id: 'id-my-words',\n        lastRepeatTime: new Date(),\n        cardsCount: 10,\n        gamesCount: 7,\n        userRating: 0.99,\n        cards: [\n            {id: 'words1', front: 'noun', back: 'существительное'},\n            {id: 'words2', front: 'verb', back: 'глагол'},\n            {id: 'words3', front: 'adjective', back: 'прилагательное'},\n        ]\n    },\n    {\n        name: 'Colors',\n        id: 'id-my-colors',\n        lastRepeatTime: new Date(Date.now() - 3 * day),\n        cardsCount: 12,\n        gamesCount: 4,\n        userRating: 0.64,\n        cards: [\n            {id : 'colors1', front: 'red', back: 'красный'},\n            {id : 'colors2', front: 'green', back: 'зеленый'},\n            {id : 'colors3', front: 'blue', back: 'синий'},\n        ]\n    }\n];\n\nexport const standardDecks = [\n    {\n        name: 'Family',\n        id: 'id-standard-family',\n        lastRepeatTime: null,\n        cardsCount: 37,\n        gamesCount: 0,\n        userRating: 0,\n        cards: [\n            {id : 'family1', front: 'mother', back: 'мама'},\n            {id : 'family2', front: 'father', back: 'папа'},\n            {id : 'family3', front: 'brother', back: 'брат'},\n            {id : 'family4', front: 'sister', back: 'сестра'},\n        ]\n    },\n    {\n        name: 'School',\n        id: 'id-standard-school',\n        lastRepeatTime: null,\n        cardsCount: 42,\n        gamesCount: 0,\n        userRating: 0,\n        cards: [\n            {id : 'school1', front: 'book', back: 'книга'},\n            {id : 'school2', front: 'pen', back: 'ручка'},\n            {id : 'school3', front: 'lesson', back: 'урок'},\n        ]\n    }\n];","import React from \"react\";\nimport './ChooseDialog.css';\n\nexport default function ChooseDialog({children, onCancel, isShown}) {\n    return (\n        <>\n            <div className={`blackout ${isShown ? 'shown' : 'hidden'}`}/>\n            <div className='choose-dialog'>\n                <div className='choices'>\n                    {children}\n                </div>\n                <button className='cancel-button shadow red' onClick={onCancel}>\n                    Отмена\n                </button>\n            </div>\n        </>\n    );\n}\n","import React from \"react\";\nimport Deck from \"../../Deck/Deck\";\nimport './DeckPage.css'\nimport {myDecks, standardDecks} from \"../../../deckExamples\";\nimport ChooseDialog from \"../../ChooseDialog/ChooseDialog\";\n\nexport default class Decks extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            decks: props.isUsers ? myDecks : standardDecks,\n            showBlackout: false\n        }\n    }\n\n    render() {\n        const {isUsers} = this.props;\n        return (\n            <>\n                <div className='page'>\n                    <div className='page-name'>\n                        {isUsers ? 'Мои колоды' : 'Стандартные колоды'}\n                    </div>\n                    <div className='decks'>\n                        {this.state.decks.map(this.createDeck)}\n                        {isUsers && <div className='create-button' onClick={this.toggleChooseDialog}>+</div>}\n                    </div>\n                </div>\n                <ChooseDialog isShown={this.state.showBlackout} onCancel={this.toggleChooseDialog}>\n                    <div className='main-color shadow deck-like' onClick={this.create}>\n                        Создать новую колоду\n                    </div>\n                    <div className='main-color shadow deck-like' onClick={this.chooseStandard}>\n                        Выбрать из стандартных\n                    </div>\n                </ChooseDialog>\n            </>\n        );\n    }\n\n    toggleChooseDialog = () => this.setState({showBlackout: !this.state.showBlackout});\n\n    createDeck = deck => (\n        this.props.isUsers\n            ? <Deck\n                deck={deck}\n                isUsers={true}\n                onPlay={() => this.props.onPlay(deck.id)}\n                onView={() => this.props.onView(deck.id)}\n                onDelete={() => this.delete(deck.id)}\n                key={deck.id}\n            />\n            : <Deck\n                deck={deck}\n                isUsers={false}\n                onView={() => this.props.onView(deck.id)}\n                onAdd={() => this.props.onAdd(deck.id)}\n                key={deck.id}\n            />\n    );\n\n    delete = deckId => this.setState({decks: this.state.decks.filter(d => d.id !== deckId)});\n\n    create = () => {\n        this.toggleChooseDialog();\n        this.props.onCreate();\n    };\n\n    chooseStandard = () => {\n        this.toggleChooseDialog();\n        this.props.onChooseStandard();\n    };\n}","import React from \"react\";\nimport './CardCarousel.css'\n\nexport default function CardCarousel({children, cardIndex, buttons, lastButton}) {\n    const curIndex = Math.min(cardIndex, children.length);\n    const shift = `calc(-${curIndex} * (var(--card-width) + 100vw))`;\n    const isLast = cardIndex === children.length;\n\n    return (\n        <div className='cards-carousel'>\n            <div className='cards-container'>\n                <div className='cards' style={{transform: `translate(${shift})`}}>\n                    {children}\n                    {lastButton}\n                </div>\n            </div>\n            <div className='buttons' style={isLast ? {transform: `translateY(100vh)`} : {}}>\n                {buttons}\n            </div>\n        </div>\n    );\n}","import React from \"react\";\nimport {standardDecks, myDecks} from \"../../../deckExamples\";\nimport FlipCard from \"../../FlipCard/FlipCard\";\nimport './GamePage.css'\nimport CardCarousel from \"../../CardCarousel/CardsCorusel\";\n\nexport default class GamePage extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.deck =\n            standardDecks.find(deck => deck.id === this.props.deckId) ||\n            myDecks.find(deck => deck.id === this.props.deckId);\n\n        this.state = {\n            cardIndex: 0,\n            flipped: this.deck.cards.map(_ => false),\n            knewCurrentCard: false\n        };\n    }\n\n    render() {\n        return (\n            <div className='page game-page'>\n                <div className='page-name'>\n                    {this.deck.name}\n                </div>\n                <CardCarousel\n                    cardIndex={this.state.cardIndex}\n                    lastButton={this.createButton('Вернуться', this.props.onEnd, 'main-color back-button')}\n                    buttons={this.getButtons()}\n                >\n                    {this.deck.cards.map(this.getCard)}\n                </CardCarousel>\n            </div>\n        );\n    }\n\n    getCard = (card, index) => (\n        <FlipCard flipped={this.state.flipped[index]} key={card.id}>\n            <div className='card-side'>{card.front}</div>\n            <div className='card-side'>{card.back}</div>\n        </FlipCard>\n    );\n\n    getButtons = () => {\n        if (this.isCurrentCardFlipped()) {\n            if (this.state.knewCurrentCard) {\n                return [\n                    this.createButton('Действительно помню', this.actuallyKnowHandle, 'green', 1),\n                    this.createButton('Все-таки не помню', this.actuallyDontKnowHandle, 'red', 2)\n                ]\n            } else {\n                return [\n                    this.createButton('Теперь запомню', this.moveToNextCard, 'green', 3)\n                ]\n            }\n        } else {\n            return [\n                this.createButton('Помню', this.knowHandle, 'green', 4),\n                this.createButton('Не помню', this.dontKnowHandle, 'red', 5)\n            ]\n        }\n    };\n\n    createButton = (label, handle, className = '', key) => (\n        <button className={`shadow ${className}`} onClick={handle} key={key}>\n            {label}\n        </button>\n    );\n\n    knowHandle = () => {\n        this.setState({\n            flipped: this.updateFlipped(),\n            knewCurrentCard: true\n        });\n    };\n\n    dontKnowHandle = () => {\n        this.setState({\n            flipped: this.updateFlipped(),\n            knewCurrentCard: false\n        });\n    };\n\n    actuallyKnowHandle = () => {\n        this.moveToNextCard();\n    };\n\n    actuallyDontKnowHandle = () => {\n        this.moveToNextCard();\n    };\n\n    isCurrentCardFlipped = () => this.state.flipped[this.state.cardIndex];\n\n    updateFlipped = () => this.state.flipped.map((f, i) => i === this.state.cardIndex ? true : f);\n\n    moveToNextCard = () => this.setState({cardIndex: this.state.cardIndex + 1});\n}","import React from \"react\";\nimport './DeckSubview.css';\n\nexport default class DeckSubview extends React.Component {\n    render() {\n        return (\n            <div className='deck-subview'>\n                {this.props.deck.cards.map(this.renderCard)}\n            </div>\n        );\n    }\n\n    renderCard = (card, i) => (\n        <div key={card.id}\n             className='card-container'\n             onClick={() => this.props.onCardChoice(i)}\n        >\n            <div className={`card ${this.props.chosenIndex === i ? 'chosen' : ''}`}>\n                <div className='card-front main-color shadow'>\n                    {card.front}\n                </div>\n                <div className='card-back main-color-light shadow'>\n                    {card.back}\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport DeckSubview from \"../../DeckSubview/DeckSubview\";\nimport {myDecks, standardDecks} from \"../../../deckExamples\";\nimport CardCarousel from \"../../CardCarousel/CardsCorusel\";\nimport FlipCard from \"../../FlipCard/FlipCard\";\nimport './ViewDeckPage.css'\nimport crossIcon from \"../../../images/Flat_cross_icon.svg\";\n\nexport default class ViewDeckPage extends React.Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        const deck =\n            standardDecks.find(deck => deck.id === this.props.deckId) ||\n            myDecks.find(deck => deck.id === this.props.deckId);\n\n        this.state = {\n            cardIndex: 0,\n            flipped: deck.cards.map(_ => false),\n            deck\n        };\n    }\n\n    render() {\n        return (\n            <div className='page view-page'>\n                <div className='page-name'>\n                    {this.getHeading()}\n                </div>\n                <div className='middle'>\n                    <CardCarousel\n                        cardIndex={this.state.cardIndex}\n                        buttons={this.getButtons()}\n                    >\n                        {this.state.deck.cards.map(this.renderCard)}\n                    </CardCarousel>\n                    <button className='main-color shadow return-button' onClick={this.props.onBack}>\n                        &lt; Вернуться\n                    </button>\n                </div>\n                <DeckSubview\n                    deck={this.state.deck}\n                    chosenIndex={this.state.cardIndex}\n                    onCardChoice={this.setCardIndex}\n                />\n            </div>\n        );\n    }\n\n    getHeading = () => {\n        const ref = React.createRef();\n        const heading = this.state.deck.name;\n        return this.props.isEditable\n            ? <input\n                type='text'\n                className='deck-heading'\n                defaultValue={heading}\n                onBlur={this.editDeckHeading}\n                ref={ref}\n                onKeyPress={this.enterHandler(ref)}\n            />\n            : heading\n    };\n\n    getButtons = () => {\n        const buttons = [\n            <button key={1} className='main-color shadow' onClick={this.flip}>Перевернуть</button>\n        ];\n        if (this.props.isEditable)\n            buttons.push(\n                <button key={2} className='main-color shadow' onClick={this.create}>Добавить новую карту</button>\n            );\n        return buttons;\n    };\n\n    renderCard = (card, i) => (\n        <FlipCard key={card.id} flipped={this.state.flipped[i]}>\n            {this.getCardSide(card.front, e => this.editCard({...card, front: e.target.value}))}\n            {this.getCardSide(card.back, e => this.editCard({...card, back: e.target.value}))}\n        </FlipCard>\n    );\n\n    getCardSide = (label, onBlur) => {\n        const ref = React.createRef();\n        return (\n            <div className='card-side'>\n                {\n                    this.props.isEditable\n                        ? <>\n                            <input\n                                type='text'\n                                defaultValue={label}\n                                onBlur={onBlur}\n                                ref={ref}\n                                onKeyPress={this.enterHandler(ref)}\n                            />\n                            {\n                                this.state.deck.cards.length > 1 &&\n                                <button className='delete-button' onClick={this.delete}>\n                                    <img src={crossIcon} alt='X' draggable={false}/>\n                                </button>\n                            }\n                        </>\n                        : label\n                }\n            </div>\n        );\n    };\n\n    setCardIndex = i => this.setState({\n        cardIndex: i,\n        flipped: this.state.deck.cards.map(_ => false)\n    });\n\n    flip = () => {\n        const {flipped, cardIndex} = this.state;\n        this.setState({\n            flipped: flipped.map((f, i) => i === cardIndex ? !f : f)\n        });\n    };\n\n    create = () => {\n        const {deck, flipped} = this.state;\n        this.setState({\n            deck: {\n                ...deck,\n                cards: deck.cards.concat({id: deck.cards.length, front: '', back: ''})\n            },\n            cardIndex: deck.cards.length,\n            flipped: flipped.concat(false)\n        });\n    };\n\n    delete = () => {\n        const {deck, cardIndex} = this.state;\n        this.setState({\n            deck: {\n                ...deck,\n                cards: deck.cards.filter((c, i) => i !== cardIndex)\n            },\n            cardIndex: cardIndex === deck.cards.length - 1 ? cardIndex - 1 : cardIndex\n        });\n    };\n\n    editDeckHeading = e => {\n        const {deck} = this.state;\n        this.setState({\n            deck: {\n                ...deck,\n                name: e.target.value\n            }\n        });\n    };\n\n    editCard = card => {\n        const {deck, cardIndex} = this.state;\n        this.setState({\n            deck: {\n                ...deck,\n                cards: deck.cards.map((c, i) => i === cardIndex ? card : c)\n            }\n        });\n    };\n\n    enterHandler = ref => e => {\n        if (e.key === \"Enter\")\n            ref.current.blur();\n    }\n\n}","import React from \"react\";\nimport {myDecks} from \"../../../deckExamples\";\nimport ViewDeckPage from \"../ViewDeckPage/ViewDeckPage\";\n\nconst createDeck = () => {\n    const newDeck = {\n        name: '',\n        id: myDecks.length,\n        lastRepeatTime: null,\n        cardsCount: 0,\n        gamesCount: 0,\n        userRating: 0,\n        cards: [\n            {id: 0, front: '', back: ''}\n        ]\n    };\n    myDecks.push(newDeck);\n    return newDeck.id;\n};\n\nexport default function CreatePage({onBack}) {\n    const id = createDeck();\n    return (\n        <ViewDeckPage\n            deckId={id}\n            isEditable={true}\n            onBack={onBack}\n        />\n    );\n}","import React from 'react';\nimport './App.css';\nimport * as PageNames from \"../Pages/PageNames\";\nimport AppName from \"../AppName/AppName\";\nimport User from \"../User/User\";\nimport MainPage from \"../Pages/MainPage/MainPage\";\nimport DecksPage from \"../Pages/DecksPage/DecksPage\";\nimport GamePage from \"../Pages/GamePage/GamePage\";\nimport CreatePage from \"../Pages/CreatePage/CreatePage\";\nimport ViewDeckPage from \"../Pages/ViewDeckPage/ViewDeckPage\";\nimport {myDecks, standardDecks} from \"../../deckExamples\";\nimport darkThemeIcon from \"../../images/brightness_4-black-48dp.svg\"\nimport brightThemeIcon from \"../../images/brightness_4-white-48dp.svg\"\n\nconst user = {id: 123, name: 'Неопознаный', surname: 'Пользователь'};\n\nexport default class App extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pageName: this.getMainPage(),\n            isDarkTheme: false\n        };\n    }\n\n    render() {\n        const {isDarkTheme, user} = this.state;\n        return (\n            <div className={`app ${isDarkTheme ? 'dark' : 'light'}`}>\n                <header className='shadow main-color'>\n                    <AppName onClick={this.goToMain}/>\n                    <button onClick={this.toggleDarkMode} className='theme-button'>\n                        <img src={isDarkTheme ? brightThemeIcon : darkThemeIcon} alt='🌗'/>\n                    </button>\n                    <User user={user}/>\n                </header>\n                {this.getPage()}\n            </div>\n        );\n    }\n\n    setPageName = name => this.setState({pageName: name});\n    setDeckId = id => this.setState({deckId: id});\n    toggleDarkMode = () => this.setState({isDarkTheme: !this.state.isDarkTheme});\n\n    play = deckId => {\n        this.setDeckId(deckId);\n        this.setPageName(PageNames.GAME);\n    };\n\n    create = () => {\n        this.setPageName(PageNames.CREATE);\n    };\n\n    edit = deckId => {\n        this.setDeckId(deckId);\n        this.setPageName(PageNames.EDIT);\n    };\n\n    view = deckId => {\n        this.setDeckId(deckId);\n        this.setPageName(PageNames.VIEW);\n    };\n\n    add = deckId => {\n        myDecks.push(standardDecks.find(deck => deck.id === deckId));\n        this.setPageName(PageNames.MY_DECKS);\n    };\n\n    goToMain = () => this.setPageName(this.getMainPage());\n\n    getMainPage = () => this.state && this.state.user ? PageNames.MY_DECKS : PageNames.MAIN;\n\n    logIn = () => this.setState({\n        pageName: PageNames.MY_DECKS,\n        user: user\n    });\n\n    getPage = () => {\n        switch (this.state.pageName) {\n            case PageNames.MAIN:\n                return <MainPage onLogin={this.logIn} />;\n            case PageNames.MY_DECKS:\n                return <DecksPage\n                    isUsers={true}\n                    onPlay={this.play}\n                    onView={this.edit}\n                    onCreate={this.create}\n                    onChooseStandard={() => this.setPageName(PageNames.STANDARD_DECKS)}\n                    key={PageNames.MY_DECKS}/>;\n            case PageNames.STANDARD_DECKS:\n                return <DecksPage\n                    isUsers={false}\n                    onView={this.view}\n                    onAdd={this.add}\n                    key={PageNames.STANDARD_DECKS}\n                />;\n            case PageNames.GAME:\n                return <GamePage deckId={this.state.deckId} onEnd={this.goToMain}/>;\n            case PageNames.CREATE:\n                return <CreatePage onBack={this.goToMain}/>;\n            case PageNames.EDIT:\n                return <ViewDeckPage\n                    deckId={this.state.deckId}\n                    isEditable={true}\n                    onBack={this.goToMain}\n                />;\n            case PageNames.VIEW:\n                return <ViewDeckPage\n                    deckId={this.state.deckId}\n                    isEditable={false}\n                    onBack={() => this.setPageName(PageNames.STANDARD_DECKS)}\n                />;\n            default:\n                console.log(`Can't load page with name \"${this.state.pageName}\"`)\n        }\n    }\n}","export const MAIN = 'MAIN';\nexport const MY_DECKS = 'MY_DECKS';\nexport const STANDARD_DECKS = 'STANDARD_DECKS';\nexport const GAME = 'GAME';\nexport const CREATE = 'CREATE';\nexport const EDIT = 'EDIT';\nexport const VIEW = 'VIEW';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}